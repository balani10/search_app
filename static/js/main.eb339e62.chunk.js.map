{"version":3,"sources":["api/getSuggestions.js","components/ListItem/ListItem.jsx","constants/keys.js","constants/errorTexts.js","constants/regex.js","utils/debounce.js","utils/stringOperations.js","components/SearchBar/SearchBar.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["getRandomBool","n","maxRandomCoeff","Math","floor","random","getSuggestions","text","post","results","push","Promise","resolve","reject","randomTimeout","setTimeout","ListItem","value","handleItemClick","isSelected","highlightedText","start","search","end","length","className","type","onClick","slice","defaultProps","keys","ARROW_UP","ARROW_DOWN","ENTER","errorTexts","FETCH_ERROR","INCORRECT_INPUT","regex","SEARCH_TEXT_REGEX","debounce","func","delay","timeout","params","clearTimeout","findLastSpace","lastSpace","SearchBar","useState","searchText","setSearchText","suggestions","setSuggestions","showSuggestions","setShowSuggestions","selectedSuggestion","setSelectedSuggestion","setHighlightedText","error","setError","searchRef","useRef","debouncedRenderSuggestions","useCallback","input","trim","lastWord","then","result","catch","renderSuggestions","handleSuggestionClick","suggestion","modifiedText","console","log","current","focus","placeholder","onChange","e","target","test","preventDefault","autoComplete","ref","onKeyDown","suggestionsSize","code","prev","onBlur","relatedTarget","onFocus","map","index","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb339e62.chunk.js","sourcesContent":["/* eslint-disable */\n// ================================= Mock Server Start =============================\nconst FAILURE_COEFF = 10;\nconst MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  const maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nfunction getSuggestions(text) {\n  const pre = 'pre';\n  const post = 'post';\n  const results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    const randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n// ================================= Mock Server End =============================\n\nexport default getSuggestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ListItem.css';\n\nconst ListItem = ({\n  value,\n  handleItemClick,\n  isSelected,\n  highlightedText,\n}) => {\n  const handleClick = () => {\n    handleItemClick(`${value} `);\n  };\n  const start = value.search(highlightedText);\n  const end = start + highlightedText.length;\n\n  return (\n    <li>\n      <button\n        className={isSelected ? 'Selected-item' : 'Item'}\n        type=\"button\"\n        onClick={handleClick}\n      >\n        {value.slice(0, start)}\n        <mark>{value.slice(start, end)}</mark>\n        {value.slice(end, value.length)}\n      </button>\n    </li>\n  );\n};\n\nListItem.propTypes = {\n  value: PropTypes.string,\n  handleItemClick: PropTypes.func.isRequired,\n  isSelected: PropTypes.bool,\n  highlightedText: PropTypes.string,\n};\n\nListItem.defaultProps = {\n  value: '',\n  isSelected: false,\n  highlightedText: '',\n};\n\nexport default ListItem;\n","const keys = {\n  ARROW_UP: 'ArrowUp',\n  ARROW_DOWN: 'ArrowDown',\n  ENTER: 'Enter',\n};\n\nexport default keys;\n","const errorTexts = {\n  FETCH_ERROR: 'Could not fetch suggestions...',\n  INCORRECT_INPUT: 'Special Characters are not allowed',\n};\n\nexport default errorTexts;\n","const regex = {\n  SEARCH_TEXT_REGEX: /[^A-Za-z0-9 ]/,\n};\n\nexport default regex;\n","const debounce = (func, delay) => {\n  let timeout;\n  return (...params) => {\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      func(...params);\n    }, delay);\n  };\n};\n\nexport default debounce;\n","// function to find last space in a string\nconst findLastSpace = (text) => {\n  let lastSpace = text.length - 1;\n  while (lastSpace >= 0) {\n    if (text[lastSpace] === ' ') break;\n    lastSpace -= 1;\n  }\n  return lastSpace;\n};\n\nexport default findLastSpace;\n","import React, { useState, useRef, useCallback } from 'react';\nimport getSuggestions from '../../api/getSuggestions';\nimport ListItem from '../ListItem/ListItem';\nimport './SearchBar.css';\nimport keys from '../../constants/keys';\nimport errorTexts from '../../constants/errorTexts';\nimport regex from '../../constants/regex';\nimport debounce from '../../utils/debounce';\nimport findLastSpace from '../../utils/stringOperations';\n\nconst SearchBar = () => {\n  const [searchText, setSearchText] = useState(''); // actual text in input\n  const [suggestions, setSuggestions] = useState([]); // array of suggestions\n  const [showSuggestions, setShowSuggestions] = useState(false); // flag to show/hide suggestions\n  const [selectedSuggestion, setSelectedSuggestion] = useState(0); // on up/down arrow and space key\n  const [highlightedText, setHighlightedText] = useState(''); // actual word to be searched\n  const [error, setError] = useState('');\n  const searchRef = useRef();\n\n  const renderSuggestions = (input) => {\n    if (input[input.length - 1] === ' ') return;\n    const text = input.trim();\n    const lastSpace = findLastSpace(text);\n    let lastWord = '';\n    // in case no spaces (a single word)\n    if (lastSpace === -1) lastWord = text;\n    else lastWord = text.slice(lastSpace + 1, text.length);\n    setHighlightedText(lastWord);\n    if (!lastWord.length) { // if no text in searchbar\n      setSuggestions([]);\n      return;\n    }\n    getSuggestions(lastWord) // firing the get suggestions query\n      .then((result) => {\n        setSuggestions(result);\n        setSelectedSuggestion(0);\n      })\n      .catch(() => {\n        setError(errorTexts.FETCH_ERROR); // done need to change\n        setSuggestions([]);\n        setSelectedSuggestion(0);\n      });\n  };\n  const debouncedRenderSuggestions = useCallback(\n    debounce((text) => renderSuggestions(text), 500), [],\n  ); // done useCallBack\n\n  const handleChange = (e) => {\n    if (error.length) setError('');\n    const text = e.target.value;\n    if (regex.SEARCH_TEXT_REGEX.test(text)) {\n      setError(errorTexts.INCORRECT_INPUT);\n      e.preventDefault();\n      return;\n    }\n    setSearchText(text);\n    if (!text.length || text[text.length - 1] === ' ') {\n      setSelectedSuggestion(0);\n      setSuggestions([]);\n    }\n    debouncedRenderSuggestions(text);\n  };\n\n  const handleSuggestionClick = (suggestion) => { // add suggestion to input\n    setSearchText((text) => {\n      const lastSpace = findLastSpace(text);\n      const modifiedText = (lastSpace === -1)\n        ? `${suggestion}`\n        : `${text.slice(0, lastSpace)} ${suggestion}`;\n      setSuggestions([]);\n      return modifiedText;\n    });\n    console.log(searchRef);\n    searchRef.current.focus();\n  };\n\n  const handleKeyDown = (e) => {\n    const suggestionsSize = suggestions.length + 1;\n    switch (e.code) {\n      case keys.ARROW_UP: // use constant\n        e.preventDefault();\n        setSelectedSuggestion((prev) => (prev - 1 + suggestionsSize) % suggestionsSize);\n        break;\n      case keys.ARROW_DOWN:\n        setSelectedSuggestion((prev) => (prev + 1) % suggestionsSize);\n        break;\n      case keys.ENTER: // check\n        if (selectedSuggestion > 0 && searchText.length > 0) {\n          handleSuggestionClick(`${suggestions[selectedSuggestion - 1]} `);\n        }\n        break;\n      default:\n    }\n  };\n\n  // onFocus and onBlur event on input\n  const handleFocusIn = () => {\n    setShowSuggestions(true);\n  };\n  const handleFocusOut = (e) => {\n    if (e.relatedTarget) return;\n    setShowSuggestions(false);\n  };\n\n  return (\n    <div className=\"Search-bar\">\n      <input\n        placeholder=\"Search...\"\n        type=\"search\"\n        value={searchText}\n        onChange={handleChange}\n        autoComplete=\"off\"\n        ref={searchRef}\n        onKeyDown={handleKeyDown}\n        onBlur={handleFocusOut}\n        onFocus={handleFocusIn}\n        className=\"Search-input\"\n      />\n      <ul className=\"Suggestions\">\n        {error.length && (\n        <li className=\"Suggestion-error\">\n          {error}\n        </li>\n        )}\n        {showSuggestions && suggestions.map((value, index) => (\n          <ListItem\n            key={value}\n            value={value}\n            handleItemClick={handleSuggestionClick}\n            isSelected={index + 1 === selectedSuggestion}\n            highlightedText={highlightedText}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar/SearchBar';\n\nconst App = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <SearchBar />\n    </header>\n  </div>\n);\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}